
package net.mcreator.craftnotaizai.block;

import net.minecraft.world.phys.shapes.VoxelShape;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.Rotation;
import net.minecraft.world.level.block.Mirror;
import net.minecraft.world.level.block.HorizontalDirectionalBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.BlockAndTintGetter;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.core.Direction;
import net.minecraft.core.BlockPos;

public class PurgatorySpikesBlock extends Block {
	public static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;

	public PurgatorySpikesBlock() {
		super(BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).sound(SoundType.STONE).strength(1f, 10f).noOcclusion().isRedstoneConductor((bs, br, bp) -> false));
		this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH));
	}

	@Override
	public boolean shouldDisplayFluidOverlay(BlockState state, BlockAndTintGetter world, BlockPos pos, FluidState fluidstate) {
		return true;
	}

	@Override
	public boolean propagatesSkylightDown(BlockState state, BlockGetter reader, BlockPos pos) {
		return true;
	}

	@Override
	public int getLightBlock(BlockState state, BlockGetter worldIn, BlockPos pos) {
		return 0;
	}

	@Override
	public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
		return Shapes.empty();
	}

	@Override
	public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
		return switch (state.getValue(FACING)) {
			default -> Shapes.or(box(0.5, 1, 0.5, 15.5, 2, 15.5), box(0, 0, 0, 16, 1, 16), box(6, 0.5, 13.4, 10, 1.5, 17.4), box(6.3, 0.8, 12.2, 9.7, 3.2, 15.6), box(6.6, 2.85, 12.5, 9.4, 6.65, 15.3),
					box(6.9, 5.15217, 15.0951, 9.1, 7.35217, 17.2951), box(7.2, 7.10217, 15.3951, 8.8, 10.70217, 16.9951), box(7.5, 10.65217, 15.6951, 8.5, 13.65217, 16.6951), box(7.75, 12.45406, 19.15772, 8.25, 12.95406, 21.15772),
					box(1.5, 2, 10.5, 5.5, 3, 14.5), box(1.8, 2.8, 10.8, 5.2, 5.2, 14.2), box(2.1, 4.1, 13.35, 4.9, 7.9, 16.15), box(2.4, 7.85, 13.65, 4.6, 10.05, 15.85), box(2.7, 8.78686, 16.02151, 4.3, 12.38686, 17.62151),
					box(3, 12.36091, 16.62056, 4, 13.36091, 19.62056), box(3.25, 13.17628, 19.36832, 3.75, 13.67628, 20.61832), box(4.25, 5.84326, 15.56073, 5.25, 6.84326, 18.56073), box(4.5, 7.17628, 17.76832, 5, 7.67628, 20.01832),
					box(3.95, 2.31402, 13.8158, 5.55, 5.91402, 15.4158), box(3.65, 1.0171, 12.5416, 5.85, 3.2171, 14.7416), box(11.15, 1.5171, 1.5416, 13.35, 3.7171, 3.7416), box(11.45, 2.81402, 2.8158, 13.05, 6.41402, 4.4158),
					box(11.75, 5.81558, 2.89045, 12.75, 8.81558, 3.89045), box(12, 7.67628, 6.76832, 12.5, 8.17628, 9.01832), box(12, 8.57098, 20.55222, 13, 9.57098, 23.55222), box(12.25, 10.47628, 21.56832, 12.75, 10.97628, 22.81832),
					box(11.1, 0.63985, 14.72181, 13.9, 4.43985, 17.52181), box(11.7, 7.06096, 18.43244, 13.3, 8.66096, 22.03244), box(11.4, 4.38985, 15.02181, 13.6, 6.58985, 17.22181), box(1.1, -0.11015, 2.47181, 3.9, 3.68985, 5.27181),
					box(1.4, 3.63985, 2.77181, 3.6, 5.83985, 4.97181), box(1.7, 4.49892, 2.79884, 3.3, 8.09892, 4.39884), box(2, 7.82098, 8.30222, 3, 8.82098, 11.30222), box(2.25, 9.72628, 9.31832, 2.75, 10.22628, 10.56832),
					box(8.7, -0.22671, 11.5518, 10.9, 1.97329, 13.7518), box(9, 1.0702, 12.826, 10.6, 4.6702, 14.426), box(9.3, 4.59944, 14.57093, 10.3, 5.59944, 17.57093), box(9.55, 5.93246, 16.77852, 10.05, 6.43246, 18.02852),
					box(10.8, 0.1, 13, 14.2, 2.5, 16.4), box(10.5, -0.7, 12.7, 14.5, 0.3, 16.7), box(2.1, 1.56253, 6.37152, 4.3, 3.76253, 8.57152), box(4, 1.32764, 5.59836, 8, 2.32764, 9.59836), box(4.3, 2.12764, 5.89836, 7.7, 4.52764, 9.29836),
					box(4.6, 4.17764, 6.19836, 7.4, 7.97764, 8.99836), box(4.9, 6.46513, 7.23133, 7.1, 8.66513, 9.43133), box(5.2, 8.41513, 7.53133, 6.8, 12.01513, 9.13133), box(5.5, 11.96513, 7.83133, 6.5, 14.96513, 8.83133),
					box(5.75, 13.28797, 14.61047, 6.25, 13.78797, 16.61047), box(6, 1.32764, 0.59836, 10, 2.32764, 4.59836), box(6.3, 2.12764, 0.89836, 9.7, 4.52764, 4.29836), box(6.6, 4.17764, 1.19836, 9.4, 7.97764, 3.99836),
					box(7.2, 8.41513, 2.53133, 8.8, 12.01513, 4.13133), box(7.5, 13.84578, 3.55594, 8.5, 14.84578, 6.55594), box(7.75, 14.22787, 6.35787, 8.25, 14.72787, 8.35787), box(6.9, 6.46513, 2.23133, 9.1, 8.66513, 4.43133),
					box(8.5, 1.63163, 4.93522, 12.5, 2.63163, 8.93522), box(8.8, 2.43163, 5.23522, 12.2, 4.83163, 8.63522), box(9.1, 2.99255, 6.98856, 11.9, 6.79255, 9.78856), box(9.4, 6.74255, 7.28856, 11.6, 8.94255, 9.48856),
					box(9.7, 9.39259, 10.59329, 11.3, 10.99259, 14.19329), box(10, 10.89522, 12.75025, 11, 11.89522, 15.75025), box(10.25, 12.80791, 13.80354, 10.75, 13.30791, 15.05354), box(12.75, 4.97813, 11.42847, 13.75, 7.97813, 12.42847),
					box(13, 9.03525, 12.35647, 13.5, 9.53525, 14.60647), box(12.45, 2.29274, 10.10165, 14.05, 5.89274, 11.70165), box(12.15, 1.7671, 7.7916, 14.35, 3.9671, 9.9916), box(2.4, 2.70783, 9.13698, 4, 6.30783, 10.73698),
					box(2.7, 8.26113, 7.12366, 3.7, 9.26113, 10.12366), box(2.95, 8.43246, 10.27852, 3.45, 8.93246, 11.52852));
			case NORTH -> Shapes.or(box(0.5, 1, 0.5, 15.5, 2, 15.5), box(0, 0, 0, 16, 1, 16), box(6, 0.5, -1.4, 10, 1.5, 2.6), box(6.3, 0.8, 0.4, 9.7, 3.2, 3.8), box(6.6, 2.85, 0.7, 9.4, 6.65, 3.5), box(6.9, 5.15217, -1.2951, 9.1, 7.35217, 0.9049),
					box(7.2, 7.10217, -0.9951, 8.8, 10.70217, 0.6049), box(7.5, 10.65217, -0.6951, 8.5, 13.65217, 0.3049), box(7.75, 12.45406, -5.15772, 8.25, 12.95406, -3.15772), box(10.5, 2, 1.5, 14.5, 3, 5.5), box(10.8, 2.8, 1.8, 14.2, 5.2, 5.2),
					box(11.1, 4.1, -0.15, 13.9, 7.9, 2.65), box(11.4, 7.85, 0.15, 13.6, 10.05, 2.35), box(11.7, 8.78686, -1.62151, 13.3, 12.38686, -0.02151), box(12, 12.36091, -3.62056, 13, 13.36091, -0.62056),
					box(12.25, 13.17628, -4.61832, 12.75, 13.67628, -3.36832), box(10.75, 5.84326, -2.56073, 11.75, 6.84326, 0.43927), box(11, 7.17628, -4.01832, 11.5, 7.67628, -1.76832), box(10.45, 2.31402, 0.5842, 12.05, 5.91402, 2.1842),
					box(10.15, 1.0171, 1.2584, 12.35, 3.2171, 3.4584), box(2.65, 1.5171, 12.2584, 4.85, 3.7171, 14.4584), box(2.95, 2.81402, 11.5842, 4.55, 6.41402, 13.1842), box(3.25, 5.81558, 12.10955, 4.25, 8.81558, 13.10955),
					box(3.5, 7.67628, 6.98168, 4, 8.17628, 9.23168), box(3, 8.57098, -7.55222, 4, 9.57098, -4.55222), box(3.25, 10.47628, -6.81832, 3.75, 10.97628, -5.56832), box(2.1, 0.63985, -1.52181, 4.9, 4.43985, 1.27819),
					box(2.7, 7.06096, -6.03244, 4.3, 8.66096, -2.43244), box(2.4, 4.38985, -1.22181, 4.6, 6.58985, 0.97819), box(12.1, -0.11015, 10.72819, 14.9, 3.68985, 13.52819), box(12.4, 3.63985, 11.02819, 14.6, 5.83985, 13.22819),
					box(12.7, 4.49892, 11.60116, 14.3, 8.09892, 13.20116), box(13, 7.82098, 4.69778, 14, 8.82098, 7.69778), box(13.25, 9.72628, 5.43168, 13.75, 10.22628, 6.68168), box(5.1, -0.22671, 2.2482, 7.3, 1.97329, 4.4482),
					box(5.4, 1.0702, 1.574, 7, 4.6702, 3.174), box(5.7, 4.59944, -1.57093, 6.7, 5.59944, 1.42907), box(5.95, 5.93246, -2.02852, 6.45, 6.43246, -0.77852), box(1.8, 0.1, -0.4, 5.2, 2.5, 3), box(1.5, -0.7, -0.7, 5.5, 0.3, 3.3),
					box(11.7, 1.56253, 7.42848, 13.9, 3.76253, 9.62848), box(8, 1.32764, 6.40164, 12, 2.32764, 10.40164), box(8.3, 2.12764, 6.70164, 11.7, 4.52764, 10.10164), box(8.6, 4.17764, 7.00164, 11.4, 7.97764, 9.80164),
					box(8.9, 6.46513, 6.56867, 11.1, 8.66513, 8.76867), box(9.2, 8.41513, 6.86867, 10.8, 12.01513, 8.46867), box(9.5, 11.96513, 7.16867, 10.5, 14.96513, 8.16867), box(9.75, 13.28797, -0.61047, 10.25, 13.78797, 1.38953),
					box(6, 1.32764, 11.40164, 10, 2.32764, 15.40164), box(6.3, 2.12764, 11.70164, 9.7, 4.52764, 15.10164), box(6.6, 4.17764, 12.00164, 9.4, 7.97764, 14.80164), box(7.2, 8.41513, 11.86867, 8.8, 12.01513, 13.46867),
					box(7.5, 13.84578, 9.44406, 8.5, 14.84578, 12.44406), box(7.75, 14.22787, 7.64213, 8.25, 14.72787, 9.64213), box(6.9, 6.46513, 11.56867, 9.1, 8.66513, 13.76867), box(3.5, 1.63163, 7.06478, 7.5, 2.63163, 11.06478),
					box(3.8, 2.43163, 7.36478, 7.2, 4.83163, 10.76478), box(4.1, 2.99255, 6.21144, 6.9, 6.79255, 9.01144), box(4.4, 6.74255, 6.51144, 6.6, 8.94255, 8.71144), box(4.7, 9.39259, 1.80671, 6.3, 10.99259, 5.40671),
					box(5, 10.89522, 0.24975, 6, 11.89522, 3.24975), box(5.25, 12.80791, 0.94646, 5.75, 13.30791, 2.19646), box(2.25, 4.97813, 3.57153, 3.25, 7.97813, 4.57153), box(2.5, 9.03525, 1.39353, 3, 9.53525, 3.64353),
					box(1.95, 2.29274, 4.29835, 3.55, 5.89274, 5.89835), box(1.65, 1.7671, 6.0084, 3.85, 3.9671, 8.2084), box(12, 2.70783, 5.26302, 13.6, 6.30783, 6.86302), box(12.3, 8.26113, 5.87634, 13.3, 9.26113, 8.87634),
					box(12.55, 8.43246, 4.47148, 13.05, 8.93246, 5.72148));
			case EAST -> Shapes.or(box(0.5, 1, 0.5, 15.5, 2, 15.5), box(0, 0, 0, 16, 1, 16), box(13.4, 0.5, 6, 17.4, 1.5, 10), box(12.2, 0.8, 6.3, 15.6, 3.2, 9.7), box(12.5, 2.85, 6.6, 15.3, 6.65, 9.4),
					box(15.0951, 5.15217, 6.9, 17.2951, 7.35217, 9.1), box(15.3951, 7.10217, 7.2, 16.9951, 10.70217, 8.8), box(15.6951, 10.65217, 7.5, 16.6951, 13.65217, 8.5), box(19.15772, 12.45406, 7.75, 21.15772, 12.95406, 8.25),
					box(10.5, 2, 10.5, 14.5, 3, 14.5), box(10.8, 2.8, 10.8, 14.2, 5.2, 14.2), box(13.35, 4.1, 11.1, 16.15, 7.9, 13.9), box(13.65, 7.85, 11.4, 15.85, 10.05, 13.6), box(16.02151, 8.78686, 11.7, 17.62151, 12.38686, 13.3),
					box(16.62056, 12.36091, 12, 19.62056, 13.36091, 13), box(19.36832, 13.17628, 12.25, 20.61832, 13.67628, 12.75), box(15.56073, 5.84326, 10.75, 18.56073, 6.84326, 11.75), box(17.76832, 7.17628, 11, 20.01832, 7.67628, 11.5),
					box(13.8158, 2.31402, 10.45, 15.4158, 5.91402, 12.05), box(12.5416, 1.0171, 10.15, 14.7416, 3.2171, 12.35), box(1.5416, 1.5171, 2.65, 3.7416, 3.7171, 4.85), box(2.8158, 2.81402, 2.95, 4.4158, 6.41402, 4.55),
					box(2.89045, 5.81558, 3.25, 3.89045, 8.81558, 4.25), box(6.76832, 7.67628, 3.5, 9.01832, 8.17628, 4), box(20.55222, 8.57098, 3, 23.55222, 9.57098, 4), box(21.56832, 10.47628, 3.25, 22.81832, 10.97628, 3.75),
					box(14.72181, 0.63985, 2.1, 17.52181, 4.43985, 4.9), box(18.43244, 7.06096, 2.7, 22.03244, 8.66096, 4.3), box(15.02181, 4.38985, 2.4, 17.22181, 6.58985, 4.6), box(2.47181, -0.11015, 12.1, 5.27181, 3.68985, 14.9),
					box(2.77181, 3.63985, 12.4, 4.97181, 5.83985, 14.6), box(2.79884, 4.49892, 12.7, 4.39884, 8.09892, 14.3), box(8.30222, 7.82098, 13, 11.30222, 8.82098, 14), box(9.31832, 9.72628, 13.25, 10.56832, 10.22628, 13.75),
					box(11.5518, -0.22671, 5.1, 13.7518, 1.97329, 7.3), box(12.826, 1.0702, 5.4, 14.426, 4.6702, 7), box(14.57093, 4.59944, 5.7, 17.57093, 5.59944, 6.7), box(16.77852, 5.93246, 5.95, 18.02852, 6.43246, 6.45),
					box(13, 0.1, 1.8, 16.4, 2.5, 5.2), box(12.7, -0.7, 1.5, 16.7, 0.3, 5.5), box(6.37152, 1.56253, 11.7, 8.57152, 3.76253, 13.9), box(5.59836, 1.32764, 8, 9.59836, 2.32764, 12), box(5.89836, 2.12764, 8.3, 9.29836, 4.52764, 11.7),
					box(6.19836, 4.17764, 8.6, 8.99836, 7.97764, 11.4), box(7.23133, 6.46513, 8.9, 9.43133, 8.66513, 11.1), box(7.53133, 8.41513, 9.2, 9.13133, 12.01513, 10.8), box(7.83133, 11.96513, 9.5, 8.83133, 14.96513, 10.5),
					box(14.61047, 13.28797, 9.75, 16.61047, 13.78797, 10.25), box(0.59836, 1.32764, 6, 4.59836, 2.32764, 10), box(0.89836, 2.12764, 6.3, 4.29836, 4.52764, 9.7), box(1.19836, 4.17764, 6.6, 3.99836, 7.97764, 9.4),
					box(2.53133, 8.41513, 7.2, 4.13133, 12.01513, 8.8), box(3.55594, 13.84578, 7.5, 6.55594, 14.84578, 8.5), box(6.35787, 14.22787, 7.75, 8.35787, 14.72787, 8.25), box(2.23133, 6.46513, 6.9, 4.43133, 8.66513, 9.1),
					box(4.93522, 1.63163, 3.5, 8.93522, 2.63163, 7.5), box(5.23522, 2.43163, 3.8, 8.63522, 4.83163, 7.2), box(6.98856, 2.99255, 4.1, 9.78856, 6.79255, 6.9), box(7.28856, 6.74255, 4.4, 9.48856, 8.94255, 6.6),
					box(10.59329, 9.39259, 4.7, 14.19329, 10.99259, 6.3), box(12.75025, 10.89522, 5, 15.75025, 11.89522, 6), box(13.80354, 12.80791, 5.25, 15.05354, 13.30791, 5.75), box(11.42847, 4.97813, 2.25, 12.42847, 7.97813, 3.25),
					box(12.35647, 9.03525, 2.5, 14.60647, 9.53525, 3), box(10.10165, 2.29274, 1.95, 11.70165, 5.89274, 3.55), box(7.7916, 1.7671, 1.65, 9.9916, 3.9671, 3.85), box(9.13698, 2.70783, 12, 10.73698, 6.30783, 13.6),
					box(7.12366, 8.26113, 12.3, 10.12366, 9.26113, 13.3), box(10.27852, 8.43246, 12.55, 11.52852, 8.93246, 13.05));
			case WEST -> Shapes.or(box(0.5, 1, 0.5, 15.5, 2, 15.5), box(0, 0, 0, 16, 1, 16), box(-1.4, 0.5, 6, 2.6, 1.5, 10), box(0.4, 0.8, 6.3, 3.8, 3.2, 9.7), box(0.7, 2.85, 6.6, 3.5, 6.65, 9.4), box(-1.2951, 5.15217, 6.9, 0.9049, 7.35217, 9.1),
					box(-0.9951, 7.10217, 7.2, 0.6049, 10.70217, 8.8), box(-0.6951, 10.65217, 7.5, 0.3049, 13.65217, 8.5), box(-5.15772, 12.45406, 7.75, -3.15772, 12.95406, 8.25), box(1.5, 2, 1.5, 5.5, 3, 5.5), box(1.8, 2.8, 1.8, 5.2, 5.2, 5.2),
					box(-0.15, 4.1, 2.1, 2.65, 7.9, 4.9), box(0.15, 7.85, 2.4, 2.35, 10.05, 4.6), box(-1.62151, 8.78686, 2.7, -0.02151, 12.38686, 4.3), box(-3.62056, 12.36091, 3, -0.62056, 13.36091, 4),
					box(-4.61832, 13.17628, 3.25, -3.36832, 13.67628, 3.75), box(-2.56073, 5.84326, 4.25, 0.43927, 6.84326, 5.25), box(-4.01832, 7.17628, 4.5, -1.76832, 7.67628, 5), box(0.5842, 2.31402, 3.95, 2.1842, 5.91402, 5.55),
					box(1.2584, 1.0171, 3.65, 3.4584, 3.2171, 5.85), box(12.2584, 1.5171, 11.15, 14.4584, 3.7171, 13.35), box(11.5842, 2.81402, 11.45, 13.1842, 6.41402, 13.05), box(12.10955, 5.81558, 11.75, 13.10955, 8.81558, 12.75),
					box(6.98168, 7.67628, 12, 9.23168, 8.17628, 12.5), box(-7.55222, 8.57098, 12, -4.55222, 9.57098, 13), box(-6.81832, 10.47628, 12.25, -5.56832, 10.97628, 12.75), box(-1.52181, 0.63985, 11.1, 1.27819, 4.43985, 13.9),
					box(-6.03244, 7.06096, 11.7, -2.43244, 8.66096, 13.3), box(-1.22181, 4.38985, 11.4, 0.97819, 6.58985, 13.6), box(10.72819, -0.11015, 1.1, 13.52819, 3.68985, 3.9), box(11.02819, 3.63985, 1.4, 13.22819, 5.83985, 3.6),
					box(11.60116, 4.49892, 1.7, 13.20116, 8.09892, 3.3), box(4.69778, 7.82098, 2, 7.69778, 8.82098, 3), box(5.43168, 9.72628, 2.25, 6.68168, 10.22628, 2.75), box(2.2482, -0.22671, 8.7, 4.4482, 1.97329, 10.9),
					box(1.574, 1.0702, 9, 3.174, 4.6702, 10.6), box(-1.57093, 4.59944, 9.3, 1.42907, 5.59944, 10.3), box(-2.02852, 5.93246, 9.55, -0.77852, 6.43246, 10.05), box(-0.4, 0.1, 10.8, 3, 2.5, 14.2), box(-0.7, -0.7, 10.5, 3.3, 0.3, 14.5),
					box(7.42848, 1.56253, 2.1, 9.62848, 3.76253, 4.3), box(6.40164, 1.32764, 4, 10.40164, 2.32764, 8), box(6.70164, 2.12764, 4.3, 10.10164, 4.52764, 7.7), box(7.00164, 4.17764, 4.6, 9.80164, 7.97764, 7.4),
					box(6.56867, 6.46513, 4.9, 8.76867, 8.66513, 7.1), box(6.86867, 8.41513, 5.2, 8.46867, 12.01513, 6.8), box(7.16867, 11.96513, 5.5, 8.16867, 14.96513, 6.5), box(-0.61047, 13.28797, 5.75, 1.38953, 13.78797, 6.25),
					box(11.40164, 1.32764, 6, 15.40164, 2.32764, 10), box(11.70164, 2.12764, 6.3, 15.10164, 4.52764, 9.7), box(12.00164, 4.17764, 6.6, 14.80164, 7.97764, 9.4), box(11.86867, 8.41513, 7.2, 13.46867, 12.01513, 8.8),
					box(9.44406, 13.84578, 7.5, 12.44406, 14.84578, 8.5), box(7.64213, 14.22787, 7.75, 9.64213, 14.72787, 8.25), box(11.56867, 6.46513, 6.9, 13.76867, 8.66513, 9.1), box(7.06478, 1.63163, 8.5, 11.06478, 2.63163, 12.5),
					box(7.36478, 2.43163, 8.8, 10.76478, 4.83163, 12.2), box(6.21144, 2.99255, 9.1, 9.01144, 6.79255, 11.9), box(6.51144, 6.74255, 9.4, 8.71144, 8.94255, 11.6), box(1.80671, 9.39259, 9.7, 5.40671, 10.99259, 11.3),
					box(0.24975, 10.89522, 10, 3.24975, 11.89522, 11), box(0.94646, 12.80791, 10.25, 2.19646, 13.30791, 10.75), box(3.57153, 4.97813, 12.75, 4.57153, 7.97813, 13.75), box(1.39353, 9.03525, 13, 3.64353, 9.53525, 13.5),
					box(4.29835, 2.29274, 12.45, 5.89835, 5.89274, 14.05), box(6.0084, 1.7671, 12.15, 8.2084, 3.9671, 14.35), box(5.26302, 2.70783, 2.4, 6.86302, 6.30783, 4), box(5.87634, 8.26113, 2.7, 8.87634, 9.26113, 3.7),
					box(4.47148, 8.43246, 2.95, 5.72148, 8.93246, 3.45));
		};
	}

	@Override
	protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
		builder.add(FACING);
	}

	@Override
	public BlockState getStateForPlacement(BlockPlaceContext context) {
		return this.defaultBlockState().setValue(FACING, context.getHorizontalDirection().getOpposite());
	}

	public BlockState rotate(BlockState state, Rotation rot) {
		return state.setValue(FACING, rot.rotate(state.getValue(FACING)));
	}

	public BlockState mirror(BlockState state, Mirror mirrorIn) {
		return state.rotate(mirrorIn.getRotation(state.getValue(FACING)));
	}
}
